/**
 * Condensed build.gradle to try and reproduce the cobertura cache lock issue
 */


// standard plug-ins

apply plugin: 'eclipse';
apply plugin: 'groovy';

subprojects {
	apply plugin: 'eclipse';
	apply plugin: 'java';
	apply plugin: 'maven';
	
	sourceCompatibility = 1.6;
	targetCompatibility = 1.6;
	
	repositories {
		mavenRepo url: repositoryUrl;
	}
	
	dependencies {
		testCompile 'org.mockito:mockito-all:1.8.2';
		testCompile 'junit:junit:4.7';
	}
	
	test {
		forkEvery = 1;
		maxParallelForks = 2;
	}
	
	buildscript {
		apply from: rootDir.path + '/cobertura.gradle';
	}
}


//
//subprojects {
//
//
//    
//
//    /**
//     * We overwrite the default eclipse project name so that we don't run into conflicts
//     * with non-unique names (ie, applications/signup and webapps/signup would both be 
//     * just "signup" by default)
//     **/
//    eclipse {
//        project {
//            name = "webcore-$rootProject.name-$project.name-api";
//        }
//        wtp {
//            facet {
//                // is this bit even needed? seems like there's a bug with STS settings
//                // facet name: 'jst.java', version: '1.6';
//            }
//        }
//    }
//
//
//    jar {
//        baseName = "$project.name-api";
//        manifest {
//            attributes(
//                "Extension-Name": baseName,
//                "Implementation-Title": project.name, 
//                "Implementation-Version": version,
//                "Implementation-Vendor": "Salesforce.com Web Core"
//            );
//        }
//    }
//    
//    /**
//     * Adding the intergration-test folder to each java project
//     **/
//    sourceSets {
//        integration
//    }
//
//    /**
//     * see gradle.properties for more details
//     **/    
//    uploadArchives {
//        repositories.mavenDeployer {
//            repository(url: repositoryUploadUrl) {
//                authentication(userName: repositoryUserName, password: repositoryPassword);
//            }
//        }
//    }
//
//    /**
//    * This is a bit of a work around to resolve cross-project test compile dependencies. There are
//    * a few occasions when a test class in projectA depends on a test class on projectB. By declaring
//    * the task, the dependency on testClasses and creating an artifact for it, other projects can
//    * declare the testJar artifact as a dependency.
//    *
//    * http://stackoverflow.com/questions/5144325/gradle-test-dependency
//    */
//   task testJar(type: Jar, dependsOn: testClasses) {
//       description = "creates a test jar file named test-${project.archivesBaseName}";
//       
//       baseName = "test-${project.archivesBaseName}";
//       from sourceSets.test.classes;
//   }
//   
//   configurations {
//       tests;
//   }
//   
//   artifacts {
//       tests testJar;
//   }
//   
//   /**
//    * Iterate over all sourceSets and create empty directories for the project following the gradle conventions
//    */
//   task init << {
//        description = "creates all of the important directories in the project";
//
//        sourceSets.all*.java.srcDirs*.each { it.mkdirs() }
//        sourceSets.all*.resources.srcDirs*.each { it.mkdirs() }
//
//        println "Project $project.name initialized.";
//    }
//}
//
//dependsOnChildren();
